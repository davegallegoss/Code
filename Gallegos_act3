package act3;
public class library {
	
	interface LibraryItem {
	    void borrowItem();
	    void returnItem();
	    boolean isBorrowed();
	    String getTitle();
	}

	class Book implements LibraryItem {
	    private String title;
	    private boolean borrowed;

	    public Book(String title) {
	        this.title = title;
	    }

	    @Override
	    public void borrowItem() {
	        borrowed = true;
	    }

	    @Override
	    public void returnItem() {
	        borrowed = false;
	    }

	    @Override
	    public boolean isBorrowed() {
	        return borrowed;
	    }

	    @Override
	    public String getTitle() {
	        return title;
	    }

	    @Override
	    public String toString() {
	        return getTitle();
	    }
	}

	abstract class LibraryUser {
	    public abstract void borrowItem(LibraryItem item);
	    public abstract void returnItem(LibraryItem item);
	    public abstract void printItemsBorrowed();
	}

	class Student extends LibraryUser {
	    private String name;
	    private LibraryItem[] borrowedItems;
	    private int borrowedCount;

	    public Student(String name) {
	        this.name = name;
	        borrowedItems = new LibraryItem[5];
	        borrowedCount = 0;
	    }

	    @Override
	    public void borrowItem(LibraryItem item) {
	        if (borrowedCount < borrowedItems.length && !item.isBorrowed()) {
	            item.borrowItem();
	            borrowedItems[borrowedCount++] = item;
	            System.out.println(name + " borrowed: " + item.getTitle());
	        } else {
	            System.out.println("Cannot borrow item.");
	        }
	    }

	    @Override
	    public void returnItem(LibraryItem item) {
	        item.returnItem();
	        for (int i = 0; i < borrowedCount; i++) {
	            if (borrowedItems[i] == item) {
	                System.out.println(name + " returned: " + item.getTitle());
	                borrowedItems[i] = borrowedItems[borrowedCount - 1];
	                borrowedItems[borrowedCount - 1] = null;
	                borrowedCount--;
	                return;
	            }
	        }
	    }

	    @Override
	    public void printItemsBorrowed() {
	        System.out.println(name + "'s borrowed items:");
	        for (int i = 0; i < borrowedCount; i++) {
	            System.out.println(borrowedItems[i].getTitle());
	        }
	    }
	}

	public class Main {
	    public static void main(String[] args) {
	        Book book1 = new Book("To Kill a Mockingbird");
	        Book book2 = new Book("1984");
	        
	        Student student = new Student("Alice");

	        student.borrowItem(book1);
	        student.borrowItem(book2);

	        student.printItemsBorrowed();

	        student.returnItem(book1);
	        student.printItemsBorrowed();
	    }
	}
}
